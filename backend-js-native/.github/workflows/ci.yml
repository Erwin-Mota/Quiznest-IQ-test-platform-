# =====================================================
# GitHub Actions CI/CD Pipeline
# =====================================================

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  # =====================================================
  # Code Quality Checks
  # =====================================================
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Run Prettier check
        run: npm run format:check

  # =====================================================
  # Security Audit
  # =====================================================
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --audit-level=moderate
        
      - name: Check for known vulnerabilities
        run: npm audit --audit-level=high

  # =====================================================
  # Unit Tests
  # =====================================================
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: iq_test_platform_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run database migrations
        run: npm run migrate
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: iq_test_platform_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-jwt-secret-key-for-testing-only
          JWT_REFRESH_SECRET: test-refresh-secret-key-for-testing-only
          SESSION_SECRET: test-session-secret-key-for-testing-only
          BCRYPT_ROUNDS: 4
          
      - name: Run unit tests
        run: npm run test:unit
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: iq_test_platform_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-jwt-secret-key-for-testing-only
          JWT_REFRESH_SECRET: test-refresh-secret-key-for-testing-only
          SESSION_SECRET: test-session-secret-key-for-testing-only
          BCRYPT_ROUNDS: 4
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # =====================================================
  # Integration Tests
  # =====================================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, security, unit-tests]
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: iq_test_platform_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run database migrations
        run: npm run migrate
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: iq_test_platform_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-jwt-secret-key-for-testing-only
          JWT_REFRESH_SECRET: test-refresh-secret-key-for-testing-only
          SESSION_SECRET: test-session-secret-key-for-testing-only
          BCRYPT_ROUNDS: 4
          
      - name: Run integration tests
        run: npm run test:integration
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: iq_test_platform_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-jwt-secret-key-for-testing-only
          JWT_REFRESH_SECRET: test-refresh-secret-key-for-testing-only
          SESSION_SECRET: test-session-secret-key-for-testing-only
          BCRYPT_ROUNDS: 4

  # =====================================================
  # End-to-End Tests
  # =====================================================
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: iq_test_platform_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run database migrations
        run: npm run migrate
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: iq_test_platform_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-jwt-secret-key-for-testing-only
          JWT_REFRESH_SECRET: test-refresh-secret-key-for-testing-only
          SESSION_SECRET: test-session-secret-key-for-testing-only
          BCRYPT_ROUNDS: 4
          
      - name: Run end-to-end tests
        run: npm run test:e2e
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: iq_test_platform_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-jwt-secret-key-for-testing-only
          JWT_REFRESH_SECRET: test-refresh-secret-key-for-testing-only
          SESSION_SECRET: test-session-secret-key-for-testing-only
          BCRYPT_ROUNDS: 4

  # =====================================================
  # Build and Test Docker Image
  # =====================================================
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: iq-test-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Test Docker image
        run: |
          docker run --rm -d --name test-container -p 5000:5000 \
            -e NODE_ENV=test \
            -e JWT_SECRET=test-jwt-secret-key-for-testing-only \
            -e JWT_REFRESH_SECRET=test-refresh-secret-key-for-testing-only \
            -e SESSION_SECRET=test-session-secret-key-for-testing-only \
            iq-test-backend:latest
          
          # Wait for container to start
          sleep 10
          
          # Test health endpoint
          curl -f http://localhost:5000/health || exit 1
          
          # Clean up
          docker stop test-container

  # =====================================================
  # Deploy to Staging
  # =====================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: kubectl apply -f k8s/staging/
          # Example: docker-compose -f docker-compose.staging.yml up -d

  # =====================================================
  # Deploy to Production
  # =====================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # Example: kubectl apply -f k8s/production/
          # Example: docker-compose -f docker-compose.production.yml up -d

  # =====================================================
  # Notify on Success/Failure
  # =====================================================
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Notify success
        if: needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success'
        run: |
          echo "Deployment successful!"
          # Add notification logic here (Slack, Discord, email, etc.)
          
      - name: Notify failure
        if: needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure'
        run: |
          echo "Deployment failed!"
          # Add notification logic here (Slack, Discord, email, etc.)
          exit 1
